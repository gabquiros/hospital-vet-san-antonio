//
// Mixins
// --------------------------------------------------

// core/_fonts.scss

@mixin fontArial() {
  font-family: Arial, "Helvetica Neue", Helvetica, sans-serif; // Arial
}

@mixin breakpoint($points) {
  @each $point in $points {
    @if $point == large {
      @media (min-width: $screen-lg-min) { @content; }
    }
    @else if $point == desktop {
      @media (min-width: $screen-md-min) and (max-width: $screen-lg-min) { @content; }
    }
    @else if $point == desktop-down {
      @media (max-width: $screen-md-max) { @content; }
    }
    @else if $point == tablet-up {
      @media (min-width: $screen-md-min) { @content; }
    }
    @else if $point == tablet {
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) { @content; }
    }
    @else if $point == tablet-down {
      @media (max-width: $screen-sm-max) { @content; }
    }
    @else if $point == tablet-portrait-down {
      @media (max-width: $screen-xs-max)  { @content; }
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: portrait) { @content; }
    }
    @else if $point == tablet-landscape-up {
      @media (min-width: $screen-md-min) { @content; }
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: landscape) { @content; }
    }
    @else if $point == tablet-portrait {
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: portrait) { @content; }
    }
    @else if $point == tablet-landscape {
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: landscape) { @content; }
    }
    @else if $point == phone-up {
      @media (min-width: $screen-sm-min) { @content; }
    }
    @else if $point == phone {
      @media (max-width: $screen-xs-max)  { @content; }
    }
    @else if $point == phone-portrait {
      @media (max-width: $screen-xs-max) and (orientation: portrait)  { @content; }
    }
    @else if $point == phone-landscape {
      @media (max-width: $screen-xs-max) and (orientation: landscape)  { @content; }
    }
  }
}

@mixin vertical-align($position: absolute) {
  position: $position;
  top: 50%;
  -ms-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
}

@mixin transition($args...) {
  -moz-transition: $args;
  -webkit-transition: $args;
  -o-transition: $args;
  -ms-transition: $args;
  transition: $args;
}

@mixin transform($args) {
  -webkit-transform: $args;
  -ms-transform: $args;
  -o-transform: $args;
  -moz-transform: $args;
  transform: $args;
}

@mixin displayFlex() {
  display:         flex;
  display:  -webkit-box;
  display:  -ms-flexbox;
  display: -webkit-flex;
}

@mixin homeHeroIconGrad($color1,$color2,$color3) {
  content: "";
  background: $color1; /* Old browsers */
  background: -moz-radial-gradient(center, ellipse cover,  $color1 0%, $color1 38%, $color2 51%, $color3 51%, $color3 100%); /* FF3.6-15 */
  background: -webkit-radial-gradient(center, ellipse cover,  $color1 0%,$color1 38%,$color2 51%,$color3 51%,$color3 100%); /* Chrome10-25,Safari5.1-6 */
  background: radial-gradient(ellipse at center,  $color1 0%,$color1 38%,$color2 51%,$color3 51%,$color3 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$color1', endColorstr='$color3',GradientType=1 ); /* IE6-9 fallback on horizontal gradient */
  display: inline-block;
  height: 1258%;
  left: -316%;
  position: absolute;
  top: -857%;
  width: 1655%;  
}

@mixin fontFace($family,$style: normal,$weight: normal) {
  @font-face {
    font-family: $family;
    src: url('#{$font-url}/#{$family}.eot'); // IE9 compat
    src: url('#{$font-url}/#{$family}.eot?#iefix') format('embedded-opentype'), // IE8 and below
         url('#{$font-url}/#{$family}.woff2') format('woff2'),
         url('#{$font-url}/#{$family}.woff') format('woff'), // standards
         url('#{$font-url}/#{$family}.ttf') format('truetype'); // Safari, Android, iOS

    font-style: $style;
    font-weight: $weight; 
  }
}

@function getFontSize($originalSize){
  @return $originalSize * 0.65;
}

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em;
}